
package org.mule.module.cmis.processors;

/*-
 * #%L
 * ACM Mule CMIS Connector
 * %%
 * Copyright (C) 2014 - 2018 ArkCase LLC
 * %%
 * This file is part of the ArkCase software. 
 * 
 * If the software was purchased under a paid ArkCase license, the terms of 
 * the paid license agreement will prevail.  Otherwise, the software is 
 * provided under the following open source license terms:
 * 
 * ArkCase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *  
 * ArkCase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ArkCase. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import org.mule.DefaultMuleEvent;
import org.mule.DefaultMuleMessage;
import org.mule.MessageExchangePattern;
import org.mule.RequestContext;
import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.api.callback.SourceCallback;
import org.mule.api.processor.MessageProcessor;

import javax.annotation.Generated;

import java.util.Map;

@Generated(value = "Mule DevKit Version 3.4.0", date = "2014-05-13T04:20:32-03:00", comments = "Build 3.4.0.1555.8df15c1")
public abstract class AbstractListeningMessageProcessor<O>
        extends AbstractMessageProcessor<O>
        implements SourceCallback
{

    /**
     * Message processor that will get called for processing incoming events
     * 
     */
    private MessageProcessor messageProcessor;

    /**
     * Retrieves messageProcessor
     * 
     */
    public MessageProcessor getMessageProcessor()
    {
        return this.messageProcessor;
    }

    /**
     * Sets the message processor that will "listen" the events generated by this message source
     * 
     * @param listener
     *            Message processor
     */
    public void setListener(MessageProcessor listener)
    {
        this.messageProcessor = listener;
    }

    /**
     * Implements {@link SourceCallback#process(org.mule.api.MuleEvent)}. This message source will be passed on to the
     * actual pojo's method as a callback mechanism.
     * 
     */
    public Object process(Object message)
            throws Exception
    {
        MuleMessage muleMessage;
        muleMessage = new DefaultMuleMessage(message, getMuleContext());
        MuleEvent muleEvent;
        muleEvent = new DefaultMuleEvent(muleMessage, MessageExchangePattern.ONE_WAY, getFlowConstruct());
        try
        {
            MuleEvent responseEvent;
            responseEvent = messageProcessor.process(muleEvent);
            if ((responseEvent != null) && (responseEvent.getMessage() != null))
            {
                return responseEvent.getMessage().getPayload();
            }
        }
        catch (Exception e)
        {
            throw e;
        }
        return null;
    }

    /**
     * Implements {@link SourceCallback#process(org.mule.api.MuleEvent)}. This message source will be passed on to the
     * actual pojo's method as a callback mechanism.
     * 
     */
    public Object process(Object message, Map<String, Object> properties)
            throws Exception
    {
        MuleMessage muleMessage;
        muleMessage = new DefaultMuleMessage(message, properties, null, null, getMuleContext());
        MuleEvent muleEvent;
        muleEvent = new DefaultMuleEvent(muleMessage, MessageExchangePattern.ONE_WAY, getFlowConstruct());
        try
        {
            MuleEvent responseEvent;
            responseEvent = messageProcessor.process(muleEvent);
            if ((responseEvent != null) && (responseEvent.getMessage() != null))
            {
                return responseEvent.getMessage().getPayload();
            }
        }
        catch (Exception e)
        {
            throw e;
        }
        return null;
    }

    /**
     * Implements {@link SourceCallback#process()}. This message source will be passed on to the actual pojo's method as
     * a callback mechanism.
     * 
     */
    public Object process()
            throws Exception
    {
        try
        {
            MuleEvent responseEvent;
            responseEvent = messageProcessor.process(RequestContext.getEvent());
            if ((responseEvent != null) && (responseEvent.getMessage() != null))
            {
                return responseEvent.getMessage().getPayload();
            }
        }
        catch (Exception e)
        {
            throw e;
        }
        return null;
    }

    /**
     * Implements {@link SourceCallback#processEvent(org.mule.api.MuleEvent)}. This message source will be passed on to
     * the actual pojo's method as a callback mechanism.
     * 
     */
    public MuleEvent processEvent(MuleEvent event)
            throws MuleException
    {
        return messageProcessor.process(event);
    }

}
