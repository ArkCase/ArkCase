package com.armedia.acm.hazelcast.kryo;

/*-
 * #%L
 * Tool Integrations: Hazelcast Integration
 * %%
 * Copyright (C) 2014 - 2019 ArkCase LLC
 * %%
 * This file is part of the ArkCase software. 
 * 
 * If the software was purchased under a paid ArkCase license, the terms of 
 * the paid license agreement will prevail.  Otherwise, the software is 
 * provided under the following open source license terms:
 * 
 * ArkCase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *  
 * ArkCase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ArkCase. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.StreamSerializer;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import info.jerrinot.subzero.internal.strategy.KryoStrategy;

public abstract class AbstractAcmKryoSerializer<T> implements StreamSerializer<T>, HazelcastInstanceAware
{
    private int autoGeneratedTypeId;
    private HazelcastInstance hazelcastInstance;
    private KryoStrategy<T> strategy;

    AbstractAcmKryoSerializer()
    {
    }

    AbstractAcmKryoSerializer(KryoStrategy<T> strategy)
    {
        this.strategy = strategy;
    }

    @Override
    public void write(ObjectDataOutput out, T object) throws IOException
    {
        strategy.write((OutputStream) out, object);
    }

    @Override
    public T read(ObjectDataInput in) throws IOException
    {
        return strategy.read((InputStream) in);
    }

    @Override
    public int getTypeId()
    {
        return autoGeneratedTypeId;
    }

    @Override
    public void destroy()
    {
        strategy.destroy(hazelcastInstance);
    }

    @Override
    public final void setHazelcastInstance(HazelcastInstance hazelcastInstance)
    {
        strategy.setHazelcastInstance(hazelcastInstance);
        this.hazelcastInstance = hazelcastInstance;
        this.autoGeneratedTypeId = strategy.newId();
    }
}
