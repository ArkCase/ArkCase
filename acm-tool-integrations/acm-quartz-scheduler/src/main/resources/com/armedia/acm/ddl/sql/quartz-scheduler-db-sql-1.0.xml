<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="
            http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">


    <changeSet id="01-create-quartz-tables" author="ncuculova" dbms="mysql">
        <sql>
            CREATE TABLE QRTZ_JOB_DETAILS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            JOB_NAME VARCHAR(200) NOT NULL,
            JOB_GROUP VARCHAR(200) NOT NULL,
            DESCRIPTION VARCHAR(250) NULL,
            JOB_CLASS_NAME VARCHAR(250) NOT NULL,
            IS_DURABLE VARCHAR(1) NOT NULL,
            IS_NONCONCURRENT VARCHAR(1) NOT NULL,
            IS_UPDATE_DATA VARCHAR(1) NOT NULL,
            REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
            JOB_DATA BLOB NULL,
            PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE QRTZ_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            JOB_NAME VARCHAR(200) NOT NULL,
            JOB_GROUP VARCHAR(200) NOT NULL,
            DESCRIPTION VARCHAR(250) NULL,
            NEXT_FIRE_TIME BIGINT(13) NULL,
            PREV_FIRE_TIME BIGINT(13) NULL,
            PRIORITY INTEGER NULL,
            TRIGGER_STATE VARCHAR(16) NOT NULL,
            TRIGGER_TYPE VARCHAR(8) NOT NULL,
            START_TIME BIGINT(13) NOT NULL,
            END_TIME BIGINT(13) NULL,
            CALENDAR_NAME VARCHAR(200) NULL,
            MISFIRE_INSTR SMALLINT(2) NULL,
            JOB_DATA BLOB NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE QRTZ_SIMPLE_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            REPEAT_COUNT BIGINT(7) NOT NULL,
            REPEAT_INTERVAL BIGINT(12) NOT NULL,
            TIMES_TRIGGERED BIGINT(10) NOT NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_CRON_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            CRON_EXPRESSION VARCHAR(200) NOT NULL,
            TIME_ZONE_ID VARCHAR(80),
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_SIMPROP_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            STR_PROP_1 VARCHAR(512) NULL,
            STR_PROP_2 VARCHAR(512) NULL,
            STR_PROP_3 VARCHAR(512) NULL,
            INT_PROP_1 INT NULL,
            INT_PROP_2 INT NULL,
            LONG_PROP_1 BIGINT NULL,
            LONG_PROP_2 BIGINT NULL,
            DEC_PROP_1 NUMERIC(13,4) NULL,
            DEC_PROP_2 NUMERIC(13,4) NULL,
            BOOL_PROP_1 VARCHAR(1) NULL,
            BOOL_PROP_2 VARCHAR(1) NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_BLOB_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            BLOB_DATA BLOB NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_CALENDARS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            CALENDAR_NAME VARCHAR(200) NOT NULL,
            CALENDAR BLOB NOT NULL,
            PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
            );

            CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_FIRED_TRIGGERS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            ENTRY_ID VARCHAR(95) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            INSTANCE_NAME VARCHAR(200) NOT NULL,
            FIRED_TIME BIGINT(13) NOT NULL,
            SCHED_TIME BIGINT(13) NOT NULL,
            PRIORITY INTEGER NOT NULL,
            STATE VARCHAR(16) NOT NULL,
            JOB_NAME VARCHAR(200) NULL,
            JOB_GROUP VARCHAR(200) NULL,
            IS_NONCONCURRENT VARCHAR(1) NULL,
            REQUESTS_RECOVERY VARCHAR(1) NULL,
            PRIMARY KEY (SCHED_NAME,ENTRY_ID)
            );

            CREATE TABLE QRTZ_SCHEDULER_STATE
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            INSTANCE_NAME VARCHAR(200) NOT NULL,
            LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
            CHECKIN_INTERVAL BIGINT(13) NOT NULL,
            PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
            );

            CREATE TABLE QRTZ_LOCKS
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            LOCK_NAME VARCHAR(40) NOT NULL,
            PRIMARY KEY (SCHED_NAME,LOCK_NAME)
            );
        </sql>
    </changeSet>

    <changeSet id="01-create-quartz-tables" author="ncuculova" dbms="postgresql">
        <sql>
            CREATE TABLE qrtz_job_details
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            JOB_NAME VARCHAR(200) NOT NULL,
            JOB_GROUP VARCHAR(200) NOT NULL,
            DESCRIPTION VARCHAR(250) NULL,
            JOB_CLASS_NAME VARCHAR(250) NOT NULL,
            IS_DURABLE BOOL NOT NULL,
            IS_NONCONCURRENT BOOL NOT NULL,
            IS_UPDATE_DATA BOOL NOT NULL,
            REQUESTS_RECOVERY BOOL NOT NULL,
            JOB_DATA BYTEA NULL,
            PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE qrtz_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            JOB_NAME VARCHAR(200) NOT NULL,
            JOB_GROUP VARCHAR(200) NOT NULL,
            DESCRIPTION VARCHAR(250) NULL,
            NEXT_FIRE_TIME BIGINT NULL,
            PREV_FIRE_TIME BIGINT NULL,
            PRIORITY INTEGER NULL,
            TRIGGER_STATE VARCHAR(16) NOT NULL,
            TRIGGER_TYPE VARCHAR(8) NOT NULL,
            START_TIME BIGINT NOT NULL,
            END_TIME BIGINT NULL,
            CALENDAR_NAME VARCHAR(200) NULL,
            MISFIRE_INSTR SMALLINT NULL,
            JOB_DATA BYTEA NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE qrtz_simple_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            REPEAT_COUNT BIGINT NOT NULL,
            REPEAT_INTERVAL BIGINT NOT NULL,
            TIMES_TRIGGERED BIGINT NOT NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_cron_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            CRON_EXPRESSION VARCHAR(120) NOT NULL,
            TIME_ZONE_ID VARCHAR(80),
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_simprop_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            STR_PROP_1 VARCHAR(512) NULL,
            STR_PROP_2 VARCHAR(512) NULL,
            STR_PROP_3 VARCHAR(512) NULL,
            INT_PROP_1 INT NULL,
            INT_PROP_2 INT NULL,
            LONG_PROP_1 BIGINT NULL,
            LONG_PROP_2 BIGINT NULL,
            DEC_PROP_1 NUMERIC(13,4) NULL,
            DEC_PROP_2 NUMERIC(13,4) NULL,
            BOOL_PROP_1 BOOL NULL,
            BOOL_PROP_2 BOOL NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_blob_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            BLOB_DATA BYTEA NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_calendars
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            CALENDAR_NAME VARCHAR(200) NOT NULL,
            CALENDAR BYTEA NOT NULL,
            PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
            );


            CREATE TABLE qrtz_paused_trigger_grps
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_fired_triggers
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            ENTRY_ID VARCHAR(95) NOT NULL,
            TRIGGER_NAME VARCHAR(200) NOT NULL,
            TRIGGER_GROUP VARCHAR(200) NOT NULL,
            INSTANCE_NAME VARCHAR(200) NOT NULL,
            FIRED_TIME BIGINT NOT NULL,
            SCHED_TIME BIGINT NOT NULL,
            PRIORITY INTEGER NOT NULL,
            STATE VARCHAR(16) NOT NULL,
            JOB_NAME VARCHAR(200) NULL,
            JOB_GROUP VARCHAR(200) NULL,
            IS_NONCONCURRENT BOOL NULL,
            REQUESTS_RECOVERY BOOL NULL,
            PRIMARY KEY (SCHED_NAME,ENTRY_ID)
            );

            CREATE TABLE qrtz_scheduler_state
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            INSTANCE_NAME VARCHAR(200) NOT NULL,
            LAST_CHECKIN_TIME BIGINT NOT NULL,
            CHECKIN_INTERVAL BIGINT NOT NULL,
            PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
            );

            CREATE TABLE qrtz_locks
            (
            SCHED_NAME VARCHAR(120) NOT NULL,
            LOCK_NAME VARCHAR(40) NOT NULL,
            PRIMARY KEY (SCHED_NAME,LOCK_NAME)
            );

            create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
            create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

            create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
            create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
            create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
            create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
            create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
            create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
            create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
            create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
            create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

            create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
            create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
            create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
            create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
            create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
            create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);
        </sql>
    </changeSet>

    <changeSet id="01-create-quartz-tables" author="ncuculova" dbms="oracle">
        <sql>
            CREATE TABLE qrtz_job_details
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            JOB_NAME VARCHAR2(200) NOT NULL,
            JOB_GROUP VARCHAR2(200) NOT NULL,
            DESCRIPTION VARCHAR2(250) NULL,
            JOB_CLASS_NAME VARCHAR2(250) NOT NULL,
            IS_DURABLE VARCHAR2(1) NOT NULL,
            IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
            IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
            REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
            JOB_DATA BLOB NULL,
            CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            );
            CREATE TABLE qrtz_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            JOB_NAME VARCHAR2(200) NOT NULL,
            JOB_GROUP VARCHAR2(200) NOT NULL,
            DESCRIPTION VARCHAR2(250) NULL,
            NEXT_FIRE_TIME NUMBER(13) NULL,
            PREV_FIRE_TIME NUMBER(13) NULL,
            PRIORITY NUMBER(13) NULL,
            TRIGGER_STATE VARCHAR2(16) NOT NULL,
            TRIGGER_TYPE VARCHAR2(8) NOT NULL,
            START_TIME NUMBER(13) NOT NULL,
            END_TIME NUMBER(13) NULL,
            CALENDAR_NAME VARCHAR2(200) NULL,
            MISFIRE_INSTR NUMBER(2) NULL,
            JOB_DATA BLOB NULL,
            CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
            );
            CREATE TABLE qrtz_simple_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            REPEAT_COUNT NUMBER(7) NOT NULL,
            REPEAT_INTERVAL NUMBER(12) NOT NULL,
            TIMES_TRIGGERED NUMBER(10) NOT NULL,
            CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );
            CREATE TABLE qrtz_cron_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            CRON_EXPRESSION VARCHAR2(120) NOT NULL,
            TIME_ZONE_ID VARCHAR2(80),
            CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );
            CREATE TABLE qrtz_simprop_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            STR_PROP_1 VARCHAR2(512) NULL,
            STR_PROP_2 VARCHAR2(512) NULL,
            STR_PROP_3 VARCHAR2(512) NULL,
            INT_PROP_1 NUMBER(10) NULL,
            INT_PROP_2 NUMBER(10) NULL,
            LONG_PROP_1 NUMBER(13) NULL,
            LONG_PROP_2 NUMBER(13) NULL,
            DEC_PROP_1 NUMERIC(13,4) NULL,
            DEC_PROP_2 NUMERIC(13,4) NULL,
            BOOL_PROP_1 VARCHAR2(1) NULL,
            BOOL_PROP_2 VARCHAR2(1) NULL,
            CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );
            CREATE TABLE qrtz_blob_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            BLOB_DATA BLOB NULL,
            CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
            CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            );
            CREATE TABLE qrtz_calendars
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            CALENDAR_NAME VARCHAR2(200) NOT NULL,
            CALENDAR BLOB NOT NULL,
            CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
            );
            CREATE TABLE qrtz_paused_trigger_grps
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
            );
            CREATE TABLE qrtz_fired_triggers
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            ENTRY_ID VARCHAR2(95) NOT NULL,
            TRIGGER_NAME VARCHAR2(200) NOT NULL,
            TRIGGER_GROUP VARCHAR2(200) NOT NULL,
            INSTANCE_NAME VARCHAR2(200) NOT NULL,
            FIRED_TIME NUMBER(13) NOT NULL,
            SCHED_TIME NUMBER(13) NOT NULL,
            PRIORITY NUMBER(13) NOT NULL,
            STATE VARCHAR2(16) NOT NULL,
            JOB_NAME VARCHAR2(200) NULL,
            JOB_GROUP VARCHAR2(200) NULL,
            IS_NONCONCURRENT VARCHAR2(1) NULL,
            REQUESTS_RECOVERY VARCHAR2(1) NULL,
            CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
            );
            CREATE TABLE qrtz_scheduler_state
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            INSTANCE_NAME VARCHAR2(200) NOT NULL,
            LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
            CHECKIN_INTERVAL NUMBER(13) NOT NULL,
            CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
            );
            CREATE TABLE qrtz_locks
            (
            SCHED_NAME VARCHAR2(120) NOT NULL,
            LOCK_NAME VARCHAR2(40) NOT NULL,
            CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
            );

            create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
            create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

            create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
            create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
            create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
            create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
            create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
            create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
            create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
            create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
            create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
            create index idx_qrtz_t_nft_st_misfire_grp on
            qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

            create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
            create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
            create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
            create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
            create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
            create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);
        </sql>
    </changeSet>

    <changeSet id="02-deleting_due_date_update_job" author="martin.jovanovski">
        <sql>DELETE FROM QRTZ_CRON_TRIGGERS   WHERE trigger_name IN (SELECT trigger_name FROM QRTZ_TRIGGERS WHERE job_name = 'dueDateUpdateJob')
        </sql>
        <sql>DELETE FROM QRTZ_TRIGGERS        WHERE job_name = 'dueDateUpdateJob'</sql>
        <sql>DELETE FROM QRTZ_JOB_DETAILS     WHERE job_name = 'dueDateUpdateJob'</sql>
    </changeSet>

    <changeSet id="03-update-job-data-to-trigger-full-reindex" author="vladimir.cherepnalkovski">
        <sql>UPDATE QRTZ_JOB_DETAILS SET JOB_DATA = NULL</sql>
    </changeSet>
</databaseChangeLog>