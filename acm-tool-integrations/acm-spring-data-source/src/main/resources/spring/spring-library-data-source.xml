<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:property-placeholder
            properties-ref="datasourceProperties"
            ignore-unresolvable="true"
            local-override="false"
            ignore-resource-not-found="true"
            order="3"/>

    <bean id="datasourceProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean" >
        <!-- note: must leave "file:" at the start of the file name for spring
        to be able to read the file; otherwise it will try to read from the
        classpath -->
        <property name="location" value="file:${user.home}/.acm/datasource.properties"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="localOverride" value="false"/>
        <!-- following properties are the default datasource mappings.  The properties file
             should include all of these properties.  In practice there should always be a
             specific properties file; these defaults are here for reference, not to be used. -->
        <property name="properties">
            <props>
                <prop key="acm.driverClassName">oracle.jdbc.OracleDriver</prop>
                <prop key="acm.url">jdbc:oracle:thin:@localhost:1521:XE</prop>
                <prop key="acm.username">acm</prop>
                <prop key="acm.password">acm</prop>
                <prop key="acm.initialSize">5</prop>
                <prop key="acm.maxActive">5</prop>
                <prop key="acm.minIdle">5</prop>
                <prop key="acm.maxWait">10000</prop>
                <prop key="acm.testOnBorrow">true</prop>
                <prop key="acm.testOnReturn">false</prop>
                <prop key="acm.idleConnectionTestPeriodInSeconds">30</prop>
                <prop key="acm.validationQuery">select 1 from dual</prop>
                <prop key="acm.acquireRetryAttempts">30</prop>
                <prop key="acm.acquireRetryDelay">1000</prop>
                <prop key="acm.acquireIncrement">5</prop>

                <!-- whether the schema should be updated at application startup - set to false to run with JRebel  -->
                <prop key="schema.autoUpdate">true</prop>
                <!-- database.platform must be an EclipseLink database platform. -->
                <prop key="database.platform">org.eclipse.persistence.platform.database.OraclePlatform</prop>
                <!-- EclipseLink specific: whether it should output the SQL that caused an exception -->
                <prop key="database.platform.showSql">true</prop>
                <!-- EclipseLink specific: logging level - FINER shows SQL and transaction details -->
                <prop key="eclipselink.logging.level">FINER</prop>

                <!-- JPA package scanning:
                    - comma separated list of packages to scan for JPA entity classes.
                    - NOTE: Cannot start with a wild card.  The leading package name must be specified.
                    - NOTE: Use '**' to recurse into sub-packages.
                 -->
                <prop key="jpa.model.packages">com.armedia.**</prop>

            </props>
        </property>
    </bean>

    <bean id="acmDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
            destroy-method="close">
        <property name="driverClass" value="${acm.driverClassName}"/>
        <property name="jdbcUrl" value="${acm.url}"/>
        <!--<property name="overrideDefaultUser" value="${acm.schema}"/>-->
        <property name="user" value="${acm.username}"/>
        <property name="password" value="${acm.password}"/>
        <property name="initialPoolSize" value="${acm.initialSize}"/>
        <property name="maxPoolSize" value="${acm.maxActive}"/>
        <property name="minPoolSize" value="${acm.minIdle}"/>
        <property name="checkoutTimeout" value="${acm.maxWait}"/>
        <property name="testConnectionOnCheckout" value="${acm.testOnBorrow}"/>
        <property name="testConnectionOnCheckin" value="${acm.testOnReturn}"/>
        <property name="idleConnectionTestPeriod" value="${acm.idleConnectionTestPeriodInSeconds}"/>
        <property name="preferredTestQuery" value="${acm.validationQuery}"/>
        <property name="loginTimeout" value="${acm.maxWait}"/>
        <property name="acquireRetryAttempts" value="${acm.acquireRetryAttempts}"/>
        <property name="acquireRetryDelay" value="${acm.acquireRetryDelay}"/>
        <property name="autoCommitOnClose" value="false"/>
        <property name="dataSourceName" value="acmDataSource"/>
        <property name="breakAfterAcquireFailure" value="false"/>
    </bean>


    <bean id="acmEntityManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="acmDataSource"/>
        <property name="jpaDialect" ref="eclipseLinkDialect"/>
        <property name="persistenceProviderClass" value="org.eclipse.persistence.jpa.PersistenceProvider"/>
        <property name="jpaPropertyMap">
            <props>
                <prop key="eclipselink.weaving">false</prop>
                <prop key="eclipselink.logging.level">${eclipselink.logging.level}</prop>
                <!-- The EclipseLink core cache causes unusual things to happen unless every single database
                     update is through EclipseLink.  For ACM this mostly will not be true; most customers will have
                     batch feeds and other processes that modify the share database without using the application
                     code.  May have to find another way around this if performance testing turns into an issue.
                     But for now we'll err on the side of correctness (i.e. accurate database info) -->
                <prop key="eclipselink.cache.shared.default">false</prop>
                <prop key="eclipselink.persistence-context.close-on-commit">true</prop>
                <prop key="eclipselink.validate-existence">true</prop>
            </props>
        </property>
        <property name="packagesToScan" value="${jpa.model.packages}"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
    </bean>

    <bean id="objectChangesBySessionAccumulator" class="com.armedia.acm.data.ObjectChangesBySessionAccumulator"/>
    <bean id="sessionCommitListener" class="com.armedia.acm.data.SessionAccumulatingSessionListener">
        <property name="descriptorListener" ref="objectChangesBySessionAccumulator"/>
    </bean>

    <bean id="springEntityListenerConfigurer" class="com.armedia.acm.data.SpringEntityListenerConfigurer" init-method="initBean">
        <property name="entityManagerFactory" ref="acmEntityManager"/>
        <property name="sessionListener" ref="sessionCommitListener"/>
        <property name="defaultListeners">
            <list>
                <ref bean="objectChangesBySessionAccumulator"/>
            </list>
        </property>
    </bean>

    <bean id="eclipseLinkDialect" class="org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect"/>

    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
        <property name="databasePlatform" value="${database.platform}"/>
        <property name="generateDdl" value="false"/>
        <property name="showSql" value="${database.platform.showSql}"/>
    </bean>

    <!-- JPA transaction manager (use JtaTransactionManager for
         global tx) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="acmDataSource"/>
        <property name="entityManagerFactory" ref="acmEntityManager"/>
    </bean>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- bean post-processor for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- jdbc template for non-JPA resources e.g. lists of values -->
    <bean id="acmJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg index="0" ref="acmDataSource"/>
    </bean>

    <!-- generate the database structures -->
    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="acmDataSource" />
        <property name="changeLog" value="classpath:/ddl/acm-database-changelog.xml" />
        <property name="shouldRun" value="${schema.autoUpdate}"/>
        <!--<property name="dropFirst" value="true"/>-->

        <!--
        contexts specifies the runtime contexts to use.
        -->
        <!--<property name="contexts" value="test, production" />-->
    </bean>


</beans>