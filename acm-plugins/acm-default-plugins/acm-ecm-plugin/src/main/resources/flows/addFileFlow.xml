<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:cmis="http://www.mulesoft.org/schema/mule/cmis"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      version="CE-3.4.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/cmis http://www.mulesoft.org/schema/mule/cmis/current/mule-cmis.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">


    <flow name="addFile" doc:name="Add a File to the CMIS Repository">
        <description>The payload must be an EcmFile object, which should be populated with the
            file's MIME type and filename, and a parentObject pointing to the owning object (e.g. a complaint, case file,
            task, another file, etc). The inbound properties must include these properties:
               - "inputStream" - an InputStream with the file contents.
               - "ecmFolderId" - a string with the CMIS ID of the parent folder.  The file will be added to this folder.
               - "acmUser" - an Authentication object representing the user who is adding the file.
            The return payload is the updated EcmFile object.
        </description>
        <vm:inbound-endpoint
                address="vm://addFile.in"
                exchange-pattern="request-response"
                doc:name="Add File">
        </vm:inbound-endpoint>

        <logger level="DEBUG" category="com.armedia.acm.plugins.ecm"/>

        <timer-interceptor/>

        <!-- NOTE: Intellij IDEA incorrectly claims scripting:transformer is not allowed here. This XML is valid. -->
        <scripting:transformer name="creatorModifierTransformer">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[
                    String user = message.getInboundProperty("acmUser") == null ? null :
                        message.getInboundProperty("acmUser").name;
                    if ( user != null )
                    {
                        payload.creator = payload.creator == null ? user : payload.creator;
                        payload.modifier = payload.modifier == null ? user : payload.modifier;
                    }
                    return payload;
                    ]]>
                </scripting:text>
            </scripting:script>

        </scripting:transformer>

        <!-- store the EcmFile in a flow variable so the enricher can see it -->
        <set-variable variableName="ecmFile" value="#[message.payload]"/>
        <!-- upload the file and update the EcmFile CMIS id  -->
        <!-- alfresco adds a ";1.0" string to the object ID, so we have to remove it. -->
        <enricher
                source="#[org.mule.util.StringUtils.replace(message.payload.id, &quot;;1.0&quot;, &quot;&quot;)]"
                target="#[flowVars['ecmFile'].ecmFileId]">
            <cmis:create-document-by-id-from-content
                    content-ref="#[message.inboundProperties.inputStream]"
                    filename="#[payload.fileName]"
                    folderId="#[message.inboundProperties.ecmFolderId]"
                    mimeType="#[payload.fileMimeType]"
                    objectType="cmis:document"
                    versioningState="MAJOR"/>
        </enricher>
        <logger category="com.armedia.acm.plugins.ecm" level="DEBUG"
                message="File Id: #[payload.ecmFileId]"/>

        <!-- Tell mule to call the save method (as opposed to other DAO methods that may also take an EcmFile
             parameter).  The property must go in the inbound scope.  The only way to do it is to set an outbound
             property, then call an outbound endpoint (thereby starting a new flow).
        -->
        <set-property propertyName="daoMethod" value="save"/>
        <vm:outbound-endpoint address="vm://fileDao.in" exchange-pattern="request-response"/>

        <catch-exception-strategy>
            <logger level="ERROR" category="com.armedia.acm.plugins.ecm" message="Exception saving: #[exception.message]"/>
            <set-property propertyName="saveException" value="#[exception]"/>
        </catch-exception-strategy>

    </flow>

    <flow name="fileDao" processingStrategy="synchronous">
        <vm:inbound-endpoint address="vm://fileDao.in" exchange-pattern="request-response"/>

        <logger level="TRACE" category="com.armedia.acm.plugins.ecm" message="Calling File DAO"/>

        <component doc:name="File DAO">
            <property-entry-point-resolver property="daoMethod"/>
            <spring-object bean="ecmFileDao"/>
        </component>
    </flow>

</mule>