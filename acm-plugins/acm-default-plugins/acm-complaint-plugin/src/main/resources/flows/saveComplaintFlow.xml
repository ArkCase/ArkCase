<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:cmis="http://www.mulesoft.org/schema/mule/cmis"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      version="CE-3.7.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/cmis http://www.mulesoft.org/schema/mule/cmis/current/mule-cmis.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">


    <flow name="saveComplaint" doc:name="Save Complaint">
        <description>Saves a complaint (creates new complaint if it has not been saved
            previously).  The payload must be a Complaint entity object.  The return message&quot;s
            payload is the (possibly updated) complaint; i.e. for a new complaint, the return payload&quot;s
            ID fields are populated.</description>
        <vm:inbound-endpoint
                address="vm://saveComplaint.in"
                exchange-pattern="request-response"
                doc:name="Save Complaint">
        </vm:inbound-endpoint>

        <logger level="DEBUG" category="com.armedia.acm.plugins.complaint"/>


        <timer-interceptor/>

        <set-property doc:name="Created or Updated?"
                      propertyName="complaintCreated" value="#[payload.complaintId == null]"/>
        <logger level="DEBUG" category="com.armedia.acm.plugins.complaint"/>

        <!-- NOTE: Intellij IDEA incorrectly claims scripting:transformer is not allowed here. This XML is valid. -->
        <scripting:transformer name="saveComplaintCreatorModifierTransformer">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[
                    String user = message.getInboundProperty("acmUser") == null ? null :
                        message.getInboundProperty("acmUser").name;
                    if ( user != null )
                    {
                        muleContext.registry.get("arkContext").getBean("auditPropertyEntityAdapter").setUserId(user);
                    }
                    return payload;
                    ]]>
                </scripting:text>
            </scripting:script>

        </scripting:transformer>

        <scripting:transformer name="ensureContainerExists">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[
                    import com.armedia.acm.plugins.ecm.model.AcmContainer;
                    import com.armedia.acm.plugins.ecm.model.AcmFolder;

                    if ( payload.getContainer() == null )
                    {
                        AcmContainer container = new AcmContainer();
                        payload.setContainer(container);
                        payload.getContainer().setContainerObjectType(payload.getObjectType());
                        payload.getContainer().setContainerObjectTitle(payload.getComplaintNumber());
                    }

                    if ( payload.getContainer().getFolder() == null )
                    {
                        AcmFolder folder = new AcmFolder();
                        folder.setName("ROOT");
                        payload.getContainer().setFolder(folder);
                        payload.getContainer().setAttachmentFolder(folder);
                    }

                    return payload;
                    ]]>
                </scripting:text>
            </scripting:script>

        </scripting:transformer>

        <logger level="DEBUG" category="com.armedia.acm.plugins.complaint" message="Container: #[payload.container]"/>
        <logger level="DEBUG" category="com.armedia.acm.plugins.complaint" message="Folder: #[payload.container.folder]"/>

        <scripting:transformer name="saveComplaintDaoTransformer">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[
                    payload = muleContext.registry.get("arkContext").getBean("acmComplaintDao").save(message.payload);
                    return payload;
                ]]>
                </scripting:text>
            </scripting:script>

        </scripting:transformer>

        <scripting:transformer name="saveComplaintBusinessRulesTransformer">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[
                    payload = muleContext.registry.get("arkContext").getBean("saveComplaintBusinessRule").applyRules(message.payload);
                    return payload;
                ]]>
                </scripting:text>
            </scripting:script>

        </scripting:transformer>

        <choice>
            <when expression="#[payload.ecmFolderPath != null]">
                <processor-chain>
                    <!-- store the complaint folder in a flow variable so the enricher can see it -->
                    <set-variable variableName="folder" value="#[message.payload.container.folder]"/>
                    <!-- update the complaint with the ID of the folder -->
                    <enricher  source="#[message.payload.id]" target="#[flowVars['folder'].cmisFolderId]">
                        <cmis:get-or-create-folder-by-path folderPath="#[payload.ecmFolderPath]"/>
                    </enricher>
                </processor-chain>
            </when>
            <otherwise>
                <logger category="com.armedia.acm.plugins.complaint" level="INFO" message="No need to create folder."/>
            </otherwise>
        </choice>




        <catch-exception-strategy>
            <logger level="ERROR" category="com.armedia.plugins.complaint" message="Exception saving: #[exception.message]"/>
            <set-property propertyName="saveException" value="#[exception]"/>
        </catch-exception-strategy>

    </flow>

</mule>