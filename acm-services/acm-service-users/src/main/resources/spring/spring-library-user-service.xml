<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <task:scheduler id="ldapSyncTaskScheduler" pool-size="1"/>

    <bean id="springLdapPagedDao" class="com.armedia.acm.services.users.dao.ldap.SpringLdapPagedDao"/>

    <bean id="customPagedLdapDao" class="com.armedia.acm.services.users.dao.ldap.CustomPagedLdapDao"/>

    <bean id="springLdapUserDao" class="com.armedia.acm.services.users.dao.ldap.SpringLdapUserDao"/>

    <bean id="acmUserService" class="com.armedia.acm.services.users.service.AcmUserServiceImpl">
        <property name="userDao" ref="userJpaDao"/>
    </bean>


    <!-- UserDao caching functionality -->
    <bean id="quietUserLookupCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="quietUserLookupConnectionEhCache"/>
    </bean>

    <bean id="quietUserLookupConnectionEhCache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache/quietUserLookupCacheConfig.xml"/>
        <property name="cacheManagerName" value="acm-service-users"/>
    </bean>

    <bean id="quietUserLookupCache" factory-bean="quietUserLookupCacheManager" factory-method="getCache">
        <constructor-arg value="quiet-user-cache"/>
    </bean>

    <bean id="userJpaDao" class="com.armedia.acm.services.users.dao.ldap.UserDao">
        <property name="quietUserLookupCache" ref="quietUserLookupCache"/>
    </bean>
    <!-- End UserDao caching functionality -->

    <bean id="userActionDao" class="com.armedia.acm.services.users.dao.ldap.UserActionDao"/>

    <bean id="groupDao" class="com.armedia.acm.services.users.dao.group.AcmGroupDao"/>

    <bean id="groupService" class="com.armedia.acm.services.users.service.group.GroupServiceImpl">
        <property name="userDao" ref="userJpaDao"/>
        <property name="groupDao" ref="groupDao"/>
        <property name="executeSolrQuery" ref="executeSolrQuery"/>
    </bean>

    <bean id="userActionExecutor" class="com.armedia.acm.services.users.service.ldap.AcmUserActionExecutor">
        <property name="userActionDao" ref="userActionDao"/>
    </bean>

    <bean id="userDatabaseHelper" class="com.armedia.acm.services.users.service.ldap.LdapSyncDatabaseHelper">
        <property name="userDao" ref="userJpaDao"/>
        <property name="groupDao" ref="groupDao"/>
    </bean>

    <bean id="acmLdapAuthenticateManager" class="com.armedia.acm.services.users.service.ldap.LdapAuthenticateManager">
        <property name="springContextHolder" ref="acmContextHolder"/>
    </bean>

    <!-- NOTE: LDAP sync service beans (of class com.armedia.acm.services.users.service.ldap.LdapSyncService) should
         be defined in dynamically-loaded Spring config files, placed in the ACM spring configuration folder
         ($HOME/.acm/spring). -->

    <!-- NOTE: LdapAuthenticateService beans (of class com.armedia.acm.services.users.service.ldap.LdapAuthenticateService) should
         be defined in dynamically-loaded Spring config files, placed in the ACM spring configuration folder
         ($HOME/.acm/spring). -->
    <bean id="userToSolrTransformer" class="com.armedia.acm.services.users.service.ldap.UserToSolrTransformer">
        <property name="userDao" ref="userJpaDao"/>
    </bean>

    <bean id="groupToSolrTransformer" class="com.armedia.acm.services.users.service.group.GroupToSolrTransformer">
        <property name="groupDao" ref="groupDao"/>
        <property name="userDao" ref="userJpaDao"/>
        <property name="groupService" ref="groupService"/>
    </bean>

    <bean id="ldapUserService" class="com.armedia.acm.services.users.service.ldap.LdapUserService">
        <property name="ldapDao" ref="springLdapPagedDao"/>
        <property name="userDao" ref="userJpaDao"/>
        <property name="groupDao" ref="groupDao"/>
        <property name="acmContextHolder" ref="acmContextHolder"/>
        <property name="userTransformer" ref="ldapEntryTransformer"/>
    </bean>

    <bean id="ldapGroupService" class="com.armedia.acm.services.users.service.group.LdapGroupService">
        <property name="groupDao" ref="groupDao"/>
        <property name="ldapDao" ref="springLdapPagedDao"/>
        <property name="userDao" ref="userJpaDao"/>
        <property name="acmContextHolder" ref="acmContextHolder"/>
        <property name="ldapEntryTransformer" ref="ldapEntryTransformer"/>
    </bean>

    <bean id="ldapAddUserPropertiesFile"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <!-- note: must leave "file:" at the start of the file name for spring
        to be able to read the file; otherwise it will try to read from the
        classpath -->
        <property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-ldap-add-user.properties"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="localOverride" value="false"/>
        <property name="properties">
            <props>
                <prop key="cn">fullName</prop>
                <prop key="givenName">firstName</prop>
                <prop key="sn">lastName</prop>
                <prop key="uid">userId</prop>
                <prop key="mail">mail</prop>
                <prop key="memberOf">memberOf</prop>
                <prop key="userAccountControl">userAccountControl</prop>
                <prop key="userPassword">userPassword</prop>
                <prop key="unicodePwd">unicodePwd</prop>
                <prop key="uidNumber">uidNumber</prop>
                <prop key="gidNumber">gidNumber</prop>
                <prop key="shadowWarning">shadowWarning</prop>
                <prop key="shadowLastChange">shadowLastChange</prop>
                <prop key="shadowMax">shadowMax</prop>
                <prop key="homeDirectory">homeDirectory</prop>
                <prop key="objectClass">objectClass</prop>
                <prop key="sAMAccountName">sAMAccountName</prop>
            </props>
        </property>
    </bean>

    <bean id="ldapAddGroupPropertiesFile"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <!-- note: must leave "file:" at the start of the file name for spring
        to be able to read the file; otherwise it will try to read from the
        classpath -->
        <property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-ldap-add-group.properties"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="localOverride" value="false"/>
        <property name="properties">
            <props>
                <prop key="cn">fullName</prop>
                <prop key="member">member</prop>
                <prop key="gidNumber">gidNumber</prop>
                <prop key="objectClass">objectClass</prop>
                <prop key="sAMAccountName">fullName</prop>
            </props>
        </property>
    </bean>

    <bean id="ldapEditUserPropertiesFile"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <!-- note: must leave "file:" at the start of the file name for spring
        to be able to read the file; otherwise it will try to read from the
        classpath -->
        <property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-ldap-edit-user.properties"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="localOverride" value="false"/>
        <property name="properties">
            <props>
                <prop key="sn">lastName</prop>
                <prop key="mail">mail</prop>
                <prop key="givenName">firstName</prop>
            </props>
        </property>
    </bean>

    <bean id="ldapEntryTransformer" class="com.armedia.acm.services.users.service.ldap.LdapEntryTransformer">
        <property name="ldapAddUserPropertiesFile" ref="ldapAddUserPropertiesFile"/>
        <property name="ldapAddGroupPropertiesFile" ref="ldapAddGroupPropertiesFile"/>
        <property name="ldapEditUserPropertiesFile" ref="ldapEditUserPropertiesFile"/>
        <property name="acmContextHolder" ref="acmContextHolder"/>
    </bean>

    <bean id="PasswordPatternValidation"
          class="com.armedia.acm.services.users.model.ldap.PasswordViolation">
        <constructor-arg>
            <list>
                <ref bean="PasswordShouldNotContainUserId" />
                <ref bean="PasswordShouldMatchLowerCasePattern" />
                <ref bean="PasswordShouldMatchUpperCasePattern" />
                <ref bean="PasswordShouldMatchDigitPattern" />
                <ref bean="PasswordShouldMatchSpecialCharPattern" />
                <ref bean="PasswordShouldbeOfMinimumLength"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="PasswordShouldNotContainUserId"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldNotContainUserId">
    </bean>

    <bean id="PasswordShouldMatchLowerCasePattern"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldMatchPattern">
        <constructor-arg type="java.lang.String" name="pattern" value="/^.*?[a-z].*$/"></constructor-arg>
        <constructor-arg type="java.lang.String" name="message" value="Password must contain at least one lowercase character"></constructor-arg>
    </bean>

    <bean id="PasswordShouldMatchUpperCasePattern"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldMatchPattern">
        <constructor-arg type="java.lang.String" name="pattern" value="/^.*?[A-Z].*$/"></constructor-arg>
        <constructor-arg type="java.lang.String" name="message" value="Password must contain at least one uppercase character"></constructor-arg>
    </bean>

    <bean id="PasswordShouldMatchDigitPattern"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldMatchPattern">
        <constructor-arg type="java.lang.String" name="pattern" value="/^.*?[0-9].*$/"></constructor-arg>
        <constructor-arg type="java.lang.String" name="message" value="Password must contain at least one digit (0-9)"></constructor-arg>
    </bean>

    <bean id="PasswordShouldMatchSpecialCharPattern"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldMatchPattern">
        <constructor-arg type="java.lang.String" name="pattern" value="/^.*?[!@#%^+=].*$/"></constructor-arg>
        <constructor-arg type="java.lang.String" name="message" value="Password must contain at least one special character"></constructor-arg>
    </bean>

    <bean id="PasswordShouldbeOfMinimumLength"
          class="com.armedia.acm.services.users.model.ldap.PasswordShouldMatchPattern">
        <constructor-arg type="java.lang.String" name="pattern" value="/^.{7,}$/"></constructor-arg>
        <constructor-arg type="java.lang.String" name="message" value="Password must be of minimum length of 7."></constructor-arg>
    </bean>

    <bean id="ldapProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-armedia-ldap.properties"/>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.armedia.acm.services.users.model.ldap.AcmUserGroupsContextMapper.setUserLdapAttributes"/>
        <property name="arguments">
            <list>
                <value type="java.lang.String">${ldapConfig.userAttributes}</value>
            </list>
        </property>
    </bean>

</beans>