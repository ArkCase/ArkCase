var Objects = require('../Objects.json');
var TasksPage = function() {


    this.priority = element(by.xpath(Objects.taskspage.locators.priority));
    this.taskState = element(by.xpath(Objects.taskspage.locators.taskState));
    this.assignee = element(by.xpath(Objects.taskspage.locators.assignee));
    this.assigneeDropDown = element(by.xpath(Objects.taskspage.locators.assigneeDropDown));
    this.selectAssignee = element(by.xpath(Objects.taskspage.locators.selectAssignee));
    this.assigneeBtn = element(by.xpath(Objects.taskspage.locators.assigneeBtn));
    this.taskSubject = element(by.xpath(Objects.taskspage.locators.taskSubject));
    this.taskSubjectInput = element(by.xpath(Objects.taskspage.locators.taskSubjectInput));
    this.taskSubjectBtn = element(by.xpath(Objects.taskspage.locators.taskSubjectBtn));
    this.startDate = element(by.xpath(Objects.taskspage.locators.startDate));
    this.startDateInput = element(by.xpath(Objects.taskspage.locators.startDateInput));
    this.startDateToday = element(by.buttonText(Objects.taskspage.locators.startDateToday));
    this.startDateConfrimBtn = element(by.xpath(Objects.taskspage.locators.startDateConfrimBtn));
    this.dueDate = element(by.xpath(Objects.taskspage.locators.dueDate));
    this.dueDateInput = element(by.xpath(Objects.taskspage.locators.dueDateInput));
    this.dueDateToday = element(by.buttonText(Objects.taskspage.locators.dueDateToday));
    this.dueDateConfirmBtn = element(by.xpath(Objects.taskspage.locators.dueDateConfirmBtn));
    this.percent = element(by.xpath(Objects.taskspage.locators.percent));
    this.priorityDropDown = element(by.xpath(Objects.taskspage.locators.priorityDropDown));
    this.priorityLow = element(by.xpath(Objects.taskspage.locators.priorityLow));
    this.priorityHigh = element(by.xpath(Objects.taskspage.locators.priorityHigh));
    this.priorityExpedite = element(by.xpath(Objects.taskspage.locators.priorityExpedite));
    this.priorityBtn = element(by.xpath(Objects.taskspage.locators.priorityBtn));
    this.percentCompletition = element(by.xpath(Objects.taskspage.locators.percentCompletition));
    this.percentCompletitionInput = element(by.xpath(Objects.taskspage.locators.percentCompletitionInput));
    this.percentCompletitionBtn = element(by.xpath(Objects.taskspage.locators.percentCompletitionBtn));
    this.completeBtn = element(by.buttonText(Objects.taskspage.locators.completeBtn));
    this.deleteBtn = element(by.buttonText(Objects.taskspage.locators.deleteBtn));
    this.refreshBtn = element(by.css(Objects.taskspage.locators.refreshBtn));
    this.detailsLink = element.all(by.repeater(Objects.taskspage.locators.detailsLink)).get(1);
    this.detailsTextArea = element(by.xpath(Objects.taskspage.locators.detailsTextArea));
    this.detailsSaveBtn = element(by.xpath(Objects.taskspage.locators.detailsSaveBtn));
    this.subscribeBtn = element(by.buttonText(Objects.taskspage.locators.subscribeBtn));
    this.unsubscribeBtn = element(by.buttonText(Objects.taskspage.locators.unsubscribeBtn));
    this.notesLink = element.all(by.repeater(Objects.taskspage.locators.notesLink)).get(4);
    this.notesTableTitle = element(by.css(Objects.taskspage.locators.notesTableTitle));
    this.addNoteBtn = element(by.xpath(Objects.taskspage.locators.addNoteBtn));
    this.notePopUpTitle = element(by.xpath(Objects.taskspage.locators.notePopUpTitle));
    this.noteTextArea = element(by.model(Objects.taskspage.locators.noteTextArea));
    this.noteSaveBtn = element(by.buttonText(Objects.taskspage.locators.noteSaveBtn));
    this.noteName = element.all(by.repeater(Objects.taskspage.locators.noteName)).get(0);
    this.noteCreatedDate = element.all(by.repeater(Objects.taskspage.locators.noteCreatedDate)).get(1);
    this.noteAuthor = element.all(by.repeater(Objects.taskspage.locators.noteAuthor)).get(2);
    this.deleteNoteBtn = element.all(by.repeater(Objects.taskspage.locators.deleteNoteBtn)).get(3).all(by.tagName(Objects.taskspage.locators.tag)).get(1);
    this.editNoteBtn = element.all(by.repeater(Objects.taskspage.locators.editNoteBtn)).get(3).all(by.tagName(Objects.taskspage.locators.tag)).get(0);
    this.tagsLink = element.all(by.repeater(Objects.taskspage.locators.tagsLink)).get(9);
    this.tagsTableTitle = element(by.css(Objects.taskspage.locators.tagsTableTitle));
    this.addTagBtn = element(by.xpath(Objects.taskspage.locators.addTagBtn));
    this.addTagPopUpTitle = element(by.xpath(Objects.taskspage.locators.addTagPopUpTitle));
    this.tagTextArea = element(by.xpath(Objects.taskspage.locators.tagTextArea));
    this.saveTagBtn = element(by.buttonText(Objects.taskspage.locators.saveTagBtn));
    this.tagname = element.all(by.repeater(Objects.taskspage.locators.addedtagName)).get(0);
    this.tagCreatedDate = element.all(by.repeater(Objects.taskspage.locators.tagCreatedDate)).get(1);
    this.tagCreatedBy = element.all(by.repeater(Objects.taskspage.locators.tagCreatedBy)).get(2);
    this.tagDeleteBtn = element.all(by.repeater(Objects.taskspage.locators.tagDeleteBtn)).get(3).all(by.tagName(Objects.taskspage.locators.tag)).get(0);
    this.workflowLink = element.all(by.repeater(Objects.taskspage.locators.workflowLink)).get(6);
    this.workflowTitle = element(by.css(Objects.taskspage.locators.workflowTitle));
    this.workflowParticipant = element.all(by.repeater(Objects.taskspage.locators.workflowParticipant)).get(0);
    this.workflowStatus = element.all(by.repeater(Objects.taskspage.locators.workflowStatus)).get(2);
    this.workflowStartDate = element.all(by.repeater(Objects.taskspage.locators.workflowStartDate)).get(3);
    this.workflowEndDate = element.all(by.repeater(Objects.taskspage.locators.workflowEndDate)).get(4);
    this.historyLink = element.all(by.repeater(Objects.taskspage.locators.historyLink)).get(7);
    this.historyTableTitle = element(by.css(Objects.taskspage.locators.historyTableTitle));
    this.historyEventName = element.all(by.repeater(Objects.taskspage.locators.historyEventName)).get(0);
    this.historyDate = element.all(by.repeater(Objects.taskspage.locators.historyDate)).get(1);
    this.historyUser = element.all(by.repeater(Objects.taskspage.locators.historyUser)).get(2);
    this.detailsLinkBtn = element(by.xpath(Objects.taskspage.locators.detailsLinkBtn));
    this.insertLinkTitle = element(by.xpath(Objects.taskspage.locators.insertLinkTitle));
    this.insertLinkText = element(by.xpath(Objects.taskspage.locators.insertLinkText));
    this.insertLinkUrl = element(by.xpath(Objects.taskspage.locators.insertLinkUrl));
    this.insertLinkBtn = element(by.buttonText(Objects.taskspage.locators.insertLinkBtn));
    this.headerImageLink = element(by.css(Objects.taskspage.locators.headerImageLink));
    this.dashboardTitle = element(by.css(Objects.taskspage.locators.dashboardTitle));
    this.attachmentsLink = element.all(by.repeater(Objects.taskspage.locators.attachmentsLink)).get(3);
    this.attachmentsTableTitle = element(by.css(Objects.taskspage.locators.attachmentsTableTitle));
    this.root = element(by.xpath(Objects.taskspage.locators.root));
    this.newDocument = element.all(by.css(Objects.taskspage.locators.newDocument)).get(1);
    this.otherDocument = element(by.xpath(Objects.taskspage.locators.otherDocument));
    this.documentTitle = element(by.xpath(Objects.taskspage.locators.documentTitle));
    this.newFolder = element.all(by.css(Objects.taskspage.locators.newFolder)).get(0);
    this.documentTitleInput = element(by.xpath(Objects.taskspage.locators.documentTitleInput));

};

module.exports = new TasksPage();
